"""Testing module for api train. This is a test file designed to use
pytest and prepared for some basic assertions and to add your own tests.

You can add new tests using the following structure:
```py
def test_{description for the test}(metadata):
    # Add your assertions inside the test function
    assert {statement_1 that returns true or false}
    assert {statement_2 that returns true or false}
```
The conftest.py module in the same directory includes the fixture to return
to your tests inside the argument variable `metadata` the value generated by
your function defined at `api.get_metadata`.

If your file grows in complexity, you can split it into multiple files in
the same folder. However, remember to add the prefix `test_` to the file.
"""
# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument


def test_artifact_uri(training):
    """Test training result includes artifact_uri on the return."""
    assert "artifact_uri" in training
    assert isinstance(training["artifact_uri"], str)


def test_end_time(training):
    """Test training result includes end_time on the return."""
    assert "end_time" in training
    assert isinstance(training["end_time"], int)
    assert training["end_time"] > 0


def test_experiment_id(training):
    """Test training result includes experiment_id on the return."""
    assert "experiment_id" in training
    assert isinstance(training["experiment_id"], str)


def test_lifecycle_stage(training):
    """Test training result includes lifecycle_stage on the return."""
    assert "lifecycle_stage" in training
    assert isinstance(training["lifecycle_stage"], str)
    assert training["lifecycle_stage"] == "active"


def test_run_id(training):
    """Test training result includes run_id on the return."""
    assert "run_id" in training
    assert isinstance(training["run_id"], str)


def test_run_name(training):
    """Test training result includes run_name on the return."""
    assert "run_name" in training
    assert isinstance(training["run_name"], str)


def test_start_time(training):
    """Test training result includes start_time on the return."""
    assert "start_time" in training
    assert isinstance(training["start_time"], int)
    assert training["start_time"] > 0


def test_status(training):
    """Test training result includes status on the return."""
    assert "status" in training
    assert isinstance(training["status"], str)
    assert training["status"] == "FINISHED"


def test_user_id(training):
    """Test training result includes user_id on the return."""
    assert "user_id" in training
    assert isinstance(training["user_id"], str)
