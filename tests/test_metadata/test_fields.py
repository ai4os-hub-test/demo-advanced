"""Testing module for api metadata. This is a test file designed to use
pytest and prepared for some basic assertions and to add your own tests.

You can add new tests following the next structure:
```py
def test_{description for the test}(metadata):
    assert {statement with metadata that returns true or false}
```

The module conftest.py includes the fixture to return to your tests the value
generated by your function defined at `api.get_metadata` inside the test
variable `metadata`.
"""
# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument


def test_authors(metadata):
    """Tests that metadata provides authors information."""
    assert "authors" in metadata
    assert isinstance(metadata["authors"], str)


def test_description(metadata):
    """Tests that metadata provides description information."""
    assert "description" in metadata
    assert isinstance(metadata["description"], str)


def test_license(metadata):
    """Tests that metadata provides license information."""
    assert "license" in metadata
    assert isinstance(metadata["license"], str)


def test_version(metadata):
    """Tests that metadata provides version information."""
    assert "version" in metadata
    assert isinstance(metadata["version"], str)
    assert all(v.isnumeric() for v in metadata["version"].split("."))
    assert len(metadata["version"].split(".")) == 3


def test_extra_1(metadata):  # TODO: Adjust name / delete
    """Tests that metadata provides custom model information."""
    # assert "something" in metadata
    # assert prediction.something == some_value
    raise NotImplementedError  # TODO: Delete after adding asserts


def test_extra_2(metadata):  # TODO: Adjust name / delete
    """Tests that metadata provides custom model information."""
    # assert "something" in metadata
    # assert prediction.something == some_value
    raise NotImplementedError  # TODO: Delete after adding asserts
